// <auto-generated />
using BanqueSI.Model;
using BanqueSI.Model.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace BanqueSI.Migrations
{
    [DbContext(typeof(STBDbContext))]
    [Migration("20180308223731_STBDB")]
    partial class STBDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BanqueSI.Model.Entities.Agence", b =>
                {
                    b.Property<int>("CodeAgence")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdresseAgence");

                    b.Property<double>("FondLiquideQuotidien");

                    b.Property<DateTime?>("HeureFermeture");

                    b.Property<DateTime?>("HeureOuverture");

                    b.Property<string>("NomAgence");

                    b.HasKey("CodeAgence");

                    b.ToTable("Agence");
                });

            modelBuilder.Entity("BanqueSI.Model.Entities.Change", b =>
                {
                    b.Property<int>("IdChange")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdresseP");

                    b.Property<int>("ChangeType");

                    b.Property<DateTime>("DateChange");

                    b.Property<string>("Destination");

                    b.Property<string>("Identif");

                    b.Property<double>("Montant");

                    b.Property<string>("NomP");

                    b.Property<string>("PrenomP");

                    b.Property<string>("employeId");

                    b.HasKey("IdChange");

                    b.HasIndex("employeId");

                    b.ToTable("Change");
                });

            modelBuilder.Entity("BanqueSI.Model.Entities.Cheque", b =>
                {
                    b.Property<int>("idC")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompteCodeCompte");

                    b.Property<DateTime>("DateV");

                    b.Property<double>("Montant");

                    b.Property<int>("NbrPagesC");

                    b.Property<string>("NomProprietaire");

                    b.Property<double>("NumeroC");

                    b.Property<string>("PrenomProprietaire");

                    b.HasKey("idC");

                    b.HasIndex("CompteCodeCompte");

                    b.ToTable("Cheque");
                });

            modelBuilder.Entity("BanqueSI.Model.Entities.Compte", b =>
                {
                    b.Property<string>("CodeCompte")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreation");

                    b.Property<double?>("Decouvert");

                    b.Property<string>("PersonneId");

                    b.Property<double>("Solde");

                    b.Property<double?>("Taux");

                    b.Property<int>("Type");

                    b.Property<string>("clientId");

                    b.HasKey("CodeCompte");

                    b.HasIndex("PersonneId");

                    b.HasIndex("clientId");

                    b.ToTable("Compte");
                });

            modelBuilder.Entity("BanqueSI.Model.Entities.Operation", b =>
                {
                    b.Property<int>("NumeroOperation")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompteCodeCompte");

                    b.Property<DateTime>("DateOperation");

                    b.Property<string>("EmployeId");

                    b.Property<double>("Montant");

                    b.Property<int>("TypeO");

                    b.HasKey("NumeroOperation");

                    b.HasIndex("CompteCodeCompte");

                    b.HasIndex("EmployeId");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("BanqueSI.Model.Entities.Personne", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NomPersonne");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int?>("agenceCodeAgence");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("agenceCodeAgence");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Personne");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BanqueSI.Model.Entities.Client", b =>
                {
                    b.HasBaseType("BanqueSI.Model.Entities.Personne");


                    b.ToTable("Client");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("BanqueSI.Model.Entities.Employe", b =>
                {
                    b.HasBaseType("BanqueSI.Model.Entities.Personne");

                    b.Property<string>("EmployeSupId");

                    b.HasIndex("EmployeSupId");

                    b.ToTable("Employe");

                    b.HasDiscriminator().HasValue("Employe");
                });

            modelBuilder.Entity("BanqueSI.Model.Entities.Change", b =>
                {
                    b.HasOne("BanqueSI.Model.Entities.Employe", "employe")
                        .WithMany("Changes")
                        .HasForeignKey("employeId");
                });

            modelBuilder.Entity("BanqueSI.Model.Entities.Cheque", b =>
                {
                    b.HasOne("BanqueSI.Model.Entities.Compte", "Compte")
                        .WithMany("Cheques")
                        .HasForeignKey("CompteCodeCompte");
                });

            modelBuilder.Entity("BanqueSI.Model.Entities.Compte", b =>
                {
                    b.HasOne("BanqueSI.Model.Entities.Employe", "Personne")
                        .WithMany("Comptes")
                        .HasForeignKey("PersonneId");

                    b.HasOne("BanqueSI.Model.Entities.Client", "client")
                        .WithMany("Comptes")
                        .HasForeignKey("clientId");
                });

            modelBuilder.Entity("BanqueSI.Model.Entities.Operation", b =>
                {
                    b.HasOne("BanqueSI.Model.Entities.Compte", "Compte")
                        .WithMany("Operations")
                        .HasForeignKey("CompteCodeCompte");

                    b.HasOne("BanqueSI.Model.Entities.Employe", "Employe")
                        .WithMany("Operations")
                        .HasForeignKey("EmployeId");
                });

            modelBuilder.Entity("BanqueSI.Model.Entities.Personne", b =>
                {
                    b.HasOne("BanqueSI.Model.Entities.Agence", "agence")
                        .WithMany("Personnes")
                        .HasForeignKey("agenceCodeAgence");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BanqueSI.Model.Entities.Personne")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BanqueSI.Model.Entities.Personne")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BanqueSI.Model.Entities.Personne")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BanqueSI.Model.Entities.Personne")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BanqueSI.Model.Entities.Employe", b =>
                {
                    b.HasOne("BanqueSI.Model.Entities.Employe", "EmployeSup")
                        .WithMany()
                        .HasForeignKey("EmployeSupId");
                });
#pragma warning restore 612, 618
        }
    }
}
